program        : _declaration*

_declaration   : class_decl
               | fun_decl
               | var_decl
               | statement

class_decl     : "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}"
fun_decl       : "fun" function
var_decl       : "var" IDENTIFIER ( "=" expression )? ";"

?statement     : expr_stmt
               | for_stmt
               | if_stmt
               | print_stmt
               | return_stmt
               | while_stmt
               | block

expr_stmt      : expression ";"
for_stmt       : "for" "(" ( var_decl | expr_stmt | ";" ) expression? ";" expression? ")" statement
if_stmt        : "if" "(" expression ")" statement ( "else" statement )?
print_stmt     : "print" expression ";"
return_stmt    : "return" expression? ";"
while_stmt     : "while" "(" expression ")" statement
block          : "{" _declaration* "}"

?expression    : assignment

?assignment    : ( call "." )? IDENTIFIER "=" assignment
               | logic_or

?logic_or      : logic_or  "or" logic_and
               | logic_and

?logic_and     : logic_and "and" equality
               | equality

?equality      : equality OP_EQUALITY comparison  -> binary
               | comparison

?comparison    : comparison OP_COMPARISON term    -> binary
               | term

?term          : term /[+-]/ factor               -> binary
               | factor

?factor        : factor /[*\/]/ unary             -> binary
               | unary

?unary         : /!|-/ unary
               | call

?call          : primary ( "(" arguments? ")" | "." IDENTIFIER )*
?primary       : LITERAL
               | NUMBER | STRING | IDENTIFIER | "(" expression ")"
               | "super" "." IDENTIFIER

function       : IDENTIFIER "(" parameters? ")" block
parameters     : IDENTIFIER ( "," IDENTIFIER )*
arguments      : expression ( "," expression )*

OP_COMPARISON  : ">" | ">=" | "<" | "<="
OP_EQUALITY    : "!=" | "=="
NUMBER         : DIGIT+ ( "." DIGIT+ )?
STRING         : "\"" /[^"]*/ "\""
LITERAL.2      : "true" | "false" | "nil" | "this"
IDENTIFIER.1   : ALPHA ( ALPHA | DIGIT )*
ALPHA          : /[a-zA-Z_]/
DIGIT          : /[0-9]/
WS             : /\s+/
COMMENT        : "//" /[^\n]*/

%ignore WS
%ignore COMMENT